{
  "intellisense": {
    "hostArchitecture": "${host:arch}",
  },
  
  "conditions": {
    // example using a conditional to set the target platform based on the host platform
    "${host:os} === 'linux'":   { "intellisense.platform": "linux" },
    "${host:os} === 'win32'":   { "intellisense.platform": "windows" },
    "${host:os} === 'darwin'":  { "intellisense.platform": "macos" }
  },
  "analysis": {
    // there are a lot of things that can be inferred from the macros that are defined by the compiler
    // if they are specified, let's use them.
    "expressions: PRIORITY=90 # things inferred from macros": {
      /* if this is truthy */               /* then apply this to the intellisense configuration */

      "${macro:_X86_}":                                                { "architecture": "x86", "bits" : 32 },
      "${macro:_x86_64_}":                                             { "architecture": "x64", "bits" : 64 },
      "${macro:__aarch64__}":                                          { "architecture": "arm64", "bits" : 64 },
      "${macro:__arm__}":                                              { "architecture": "arm", "bits" : 32 },
      "${macro:__AVR__}":                                              { "architecture": "avr", "bits": 16 },

      "${macro:winnt}":                                                { "platform": "windows" },
      "${macro:_WIN32}":                                               { "platform": "windows" },
      "${macro:_WIN64}":                                               { "platform": "windows", "bits": 64, "architecture": "x64" },
      "${macro:__linux__}":                                            { "platform": "linux" },
      "${macro:__APPLE__}":                                            { "platform": "macos" },

      "${macro:__INTPTR_WIDTH__}":                                     { "bits": "${macro:.__INTPTR_WIDTH__}" },

      "!${sizes.char} && ${macro:__CHAR_SIZE__}" :                     { "sizes.char": "${macro:__CHAR_SIZE__}" },
      
      "!${sizes.short} && ${macro:__SIZEOF_SHORT__}":                  { "sizes.short": "${macro:__SIZEOF_SHORT__}"},
      "!${sizes.short} && ${macro:__SHORT_SIZE__}":                    { "sizes.short": "${macro:__SHORT_SIZE__}"},

      "!${sizes.int} && ${macro:__SIZEOF_INT__}":                      { "sizes.int": "${macro:__SIZEOF_INT__}"},
      "!${sizes.int} && ${macro:__INT_SIZE__}":                        { "sizes.int": "${macro:__INT_SIZE__}"},

      "!${sizes.long} && ${macro:__SIZEOF_LONG__}" :                   { "sizes.long": "${macro:__SIZEOF_LONG__}" },
      "!${sizes.long} && ${macro:__LONG_SIZE__}" :                     { "sizes.long": "${macro:__LONG_SIZE__}" },

      "!${sizes.longDouble} && ${macro:__SIZEOF_LONG_DOUBLE__}" :      { "sizes.longDouble": "${macro:__SIZEOF_LONG_DOUBLE__}" },
      "!${sizes.longDouble} && ${macro:__LONG_DOUBLE_SIZE__}" :        { "sizes.longDouble": "${macro:__LONG_DOUBLE_SIZE__}" },

      "!${sizes.float} && ${macro:__SIZEOF_FLOAT__}":                  { "sizes.float": "${macro:__SIZEOF_FLOAT__}"},
      "!${sizes.float} && ${macro:__FLOAT_SIZE__}":                    { "sizes.float": "${macro:__FLOAT_SIZE__}"},

      "!${sizes.double} && ${macro:__SIZEOF_DOUBLE__}":                { "sizes.double": "${macro:__SIZEOF_DOUBLE__}"},
      "!${sizes.double} && ${macro:__DOUBLE_SIZE__}":                  { "sizes.double": "${macro:__DOUBLE_SIZE__}"},

      "!${sizes.pointer} && ${macro:__SIZEOF_POINTER__}":              { "sizes.pointer": "${macro:__SIZEOF_POINTER__}"},
      "!${sizes.pointer} && ${macro:__DEF_PTR_SIZE__}":                { "sizes.pointer": "${macro:__DEF_PTR_SIZE__}"},

      "!${sizes.digitsInLongMantissa} && ${macro:__LDBL_MANT_DIG__}":  { "sizes.digitsInLongMantissa": "${macro:__LDBL_MANT_DIG__}"},

      "!${types.wcharT} && ${macro:__WCHAR_TYPE__}":                   { "types.wcharT":"${macro:__WCHAR_TYPE__}"},
      "!${types.wcharT} && ${macro:__WCHAR_T_TYPE__}":                 { "types.wcharT":"${macro:__WCHAR_T_TYPE__}"},

      "!${types.sizeT} && ${macro:__SIZE_TYPE__}":                     { "types.sizeT":"${macro:__SIZE_TYPE__}"},
      "!${types.sizeT} && ${macro:__SIZE_T_TYPE__}":                   { "types.sizeT":"${macro:__SIZE_T_TYPE__}"},

      "!${types.ptrDiffT} && ${macro:__PTRDIFF_TYPE__}":               { "types.ptrDiffT":"${macro:__PTRDIFF_TYPE__}"},
      "!${types.ptrDiffT} && ${macro:__PTRDIFF_T_TYPE__}":             { "types.ptrDiffT":"${macro:__PTRDIFF_T_TYPE__}"},
    },

    // when setting priority, it forces it to be higher or lower depending on the value.
    // higher numbers mean that the block is applied later, lower numbers mean that the block is applied earlier
    // the default number is the order in which it is loaded
    "expressions: PRIORITY=100": { 
      "!${sizes.long}" :                    { "sizes.long":       "${platform} === 'windows' ? 4 : ${bits} === 64 ? 8: 4" },
      "!${sizes.longDouble}":               { "sizes.longDouble": "${platform} === 'windows' || ${architecture} === 'arm' || (${architecture} === 'arm64' && ${platform} === 'macos' ) ? 8 : 16" },
      "!${sizes.char}":                     { "sizes.char":       1},
      "!${sizes.short}":                    { "sizes.short":      2},
      "!${sizes.int}":                      { "sizes.int":        4},
      "!${sizes.float}":                    { "sizes.float":      4},
      "!${sizes.double}":                   { "sizes.double":     8},
      "!${sizes.pointer}":                  { "sizes.pointer":    "${bits} === 64 ? 8: 4" },
      "!${sizes.digitsInLongMantissa}":     { "sizes.digitsInLongMantissa": "${platform} === 'windows' || ${architecture} === 'arm' || (${architecture} === 'arm64' && ${platform} === 'macos' ) ? 53 : 64" },
      "!${sizes.alignmentOfLongDouble}":    { "sizes.alignmentOfLongDouble": "${platform} === 'windows' || ${architecture} === 'arm' || (${architecture} === 'arm64' && ${platform} === 'macos' ) ? 8 : 16" },      
      "!${sizes.defaultNewAlignment}":      { "sizes.defaultNewAlignment": "${bits} === 64 ? 16 : 8" }, 
    }
  }


}