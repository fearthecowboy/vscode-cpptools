{
  "analysis": { // affects 
    "queries: ONCE": { // we never need to do this more than once
      // gets the version of the compiler by executing it with --version
      "-dumpversion": {
        "(?<version>.*)" : {"version": "${version}"}, // parse the version from the output 
      },
    },
    
    "tasks: ": [
      // tasks are one-off, built-in functionality that can be executed during analysis
    ],

    "commandLineArguments: C #" :{
      "-std=(?<std>.+)" :              { "standard":"${std}" },
      "-ansi" :                        { "standard":"c90" },
    },

    "commandLineArguments: CPP # " :{
      "-std=(?<std>.+)" :              { "standard":"${std}" },
    },

    "commandLineArguments: PRIORITY=-10 # drop these (maybe we don't even care to do this?...)": {
      "-o;.+":                          { }, // output file
      "-c;.+":                          { }, // input file
      "-param;${keyEqualsValue}":       { }, // compiler parameter
      "-aux-info;.+":                   { }, // aux info
      "-MF;.+":                         { }, // output file for dependencies
      "-MT;.+":                         { }, // target for dependencies
      "-MQ;.+":                         { }, // target for dependencies
      "-T;.+":                          { }, // link script
      "-Xlinker;.+":                    { }, // pass to linker
      "-Wl,.+":                         { }, // pass to linker
      "-z;.+":                          { }, // pass to linker
      "-Xpreprocessor;.+":              { }, // pass to preprocessor
      "-Xassembler;.+":                 { }, // pass to assembler
      "-Wa,.+":                         { }, // pass to assembler
    },

    "commandLineArguments: # " :{
      "-B(?<prefix>.+)":                { "queryArgument": "-B${prefix}" }, // binary prefix

      "-fms-extensions" :               { "parserArgument": "--ms_extensions" },
      "-fno-ms-extensions" :            { "remove:parserArgument": "--ms_extensions" },

      "-m(?<arch>.+)":                  { "queryArgument" : "-m${arch}" },
      
      "-I-":                            { "splitDir": true},

      "-I(?<path>.+)":                  { "path.include": "${path}", "queryArgument": "-I${path}" },
      "-I;(?<path>.+)":                 { "path.include": "${path}", "queryArgument": "-I${path}"},
      "-isystem;(?<path>.+)":           { "path.systemInclude": "${path}", "queryArgument": ["-isystem","${path}"] },
      "-idirafter;(?<path>.+)":         { "path.afterInclude": "${path}", "queryArgument": ["-idirafter","${path}"] },
      "-iprefix;(?<path>.+)":           { "prefixPath": "${path}", "queryArgument": ["-iprefix","${path}"] },
      "-iwithprefix;(?<path>.+)":       { "path.afterInclude": "${prefixPath}${path}", "queryArgument": ["-iwithprefix","${path}"] },
      "-iwithprefixbefore;(?<path>.+)": { "path.include": "${prefixPath}${path}", "queryArgument": ["-iwithprefixbefore","${path}"] },
      "-iquote;(?<path>.+)":            { "path.quoteInclude": "${path}", "queryArgument": ["-iquote","${path}"] },

      "-isysroot;(?<path>.+)":          { "sysroot": "${path}" },
      "-imultilib;(?<path>.+)":         { "path.multilibpaths": "${path}" },
      "-F(?<path>.+)":                  { "path.framework": "${path}" }, 

      "-D${keyEqualsValue}" :           { "macro": { "${key}": "${value}" } , "queryArgument": ["-D", "${key}=${value}"]},
      "-D${keyNoValue}" :               { "macro": { "${key}": 1 }, "queryArgument": ["-D", "${key}"]},
      "-D;${keyEqualsValue}" :          { "macro": { "${key}": "${value}" }, "queryArgument": ["-D", "${key}=${value}"]},
      "-D;${keyNoValue}" :              { "macro": { "${key}": 1 }, "queryArgument": ["-D", "${key}"]},
      "-U${keyNoValue}" :               { "macro": { "${key}": null }, "queryArgument": ["-U", "${key}"]},
      "-U$;{keyNoValue}" :              { "macro": { "${key}": null}, "queryArgument": ["-U", "${key}"]},

      "-include;(?<path>.+)":           { "path.forcedIncludeFile": "${path}" }, // forced include
      "-fexperimental-library":         { "macro": {"__has_feature(experimental_library)": 1 }},
      "-undef":                         { "queryArgument": "-undef" },

      "-x;(?<language>.+)":             { "language": "${language}" }
  
    },

    "expressions: # environment variables" : {
      "${env:CPATH}":                                     { "path.include": "${env:CPATH}" },
      "${language}=== 'c' && ${env:C_INCLUDE_PATH}":      { "path.systemInclude": "${env:C_INCLUDE_PATH}" },  
      "${language}=== 'cpp' && ${env:CPLUS_INCLUDE_PATH}":{ "path.systemInclude": "${env:CPLUS_INCLUDE_PATH}" },  
      "${language}=== 'objc' && ${env:OBJC_INCLUDE_PATH}":{ "path.systemInclude": "${env:OBJC_INCLUDE_PATH}" },
    },

    // before the sizes are set, we need to query the compiler with the right args to get the macros again 
    // (so we can let things like -m32 or -m64 or -mthumb or other arch changes affect the macros )
    "queries:":{
      // ==== COMMAND LINE IS THE KEY ==== 
      "-E -dM -v ${queryArgument} ${tmp:c}": {

        /* regex on output */                                           /* apply this to the intellisense config*/
        "^#define (?<key>\\S*) ?(?<value>.*)?$":                          { "macro":{ "${key}": "${value}" } },          
        "#include <...> search starts here:\n(?<path>(?: [^\n]*\n)*)*":   { "path.builtInInclude": "${path}" },        
        "#include \"...\" search starts here:\n(?<path>(?: [^\n]*\n)*)*": { "path.quoteInclude": "${path}" },
        "^COLLECT_GCC_OPTIONS=(?<opts>.*)":                               { "gcc.options" : "${opts}" },
        "^Target: (?<target>.*)":                                         { "gcc.target": "${target}" },          
        "^COMPILER_PATH=(?<cp>.*)":                                       { "gcc.compiler.paths": "${cp}" },
        "^LIBRARY_PATH=(?<lp>.*)":                                        { "gcc.library.paths": "${lp}" },
        "^#define __STDC_VERSION__\\s*(?<ver>.*)":                        { "cStandard": "${ver}" },      
        "^#define __cplusplus\\s*(?<ver>.*)":                             { "cppStandard": "${ver}" },    
      }
    },
  }
  // how do we specify args to trim off if the discovery is handled/initiated by someone else
}