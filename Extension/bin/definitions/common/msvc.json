{
  "analysis": { 
    // analysis steps are applied in order

    "tasks: # handle environment variables" : [
      "inline-environment-variables",     // takes the $env:CL and $env:_CL_ variables and adds them to the command line
      "inline-response-file",             // takes the @file response file and adds it to the command line
      "consume-lib-path",                 // adds $env:LIB to the lib paths
      "remove-linker-arguments",          // removes linker arguments from the command line
    ],

    "expressions: #environment variables": {
      "${env:INCLUDE}":                   { "path.environmentInclude": "${env:INCLUDE}" },
    },

    "commandLineArguments: # detect target language": { // looks thru args to find things that set certain states (ie, /Tc, /Tp for language selection )
      "${-/}T[cC]" :                      { "language": "c",},
      "${-/}T[pP]" :                      { "language": "c++" },
    },

    "commandLineArguments: NO_CONSUME # telemetry check for CLR usage": {
      // don"t consume the parameter
      "${-/}clr.*" :                      {"telemetry:cliDetected": {"cliDetection": true} },
      "${-/}ZW.*" :                       {"telemetry:cxDetected": {"cxDetection": true} } 
    },

    "commandLineArguments: # process most args": {
      "${-/}I(?<path>.+)" :               { "path.include": "${path}" },
      "${-/}I;(?<path>.+)" :              { "path.include": "${path}" },
      "${-/}FI(?<path>.+)" :              { "path.forcedIncludeFile": "${path}" }, // should we be validating the path exists against system and user include folders? -- cl_compiler_info.cpp@191
      "${-/}FI;(?<path>.+)" :             { "path.forcedIncludeFile": "${path}" },
      "-include;(?<path>.+)" :            { "path.forcedIncludeFile": "${path}" }, // This support for passing "-include" to cl.exe can be removed in the future, when Unreal Engine is updated to no longer pass it to cl.exe.
      "${-/}external:I(?<path>.+)" :      { "path.externalInclude": "${path}" },
      "${-/}external:I;(?<path>.+)" :     { "path.externalInclude": "${path}" },

      "${-/}D;${keyEqualsValue}" :        { "macro": { "${key}": "${value}" } },
      "${-/}D;${keyNoValue}" :            { "macro": { "${key}": 1 } },
      "${-/}D${keyEqualsValue}" :         { "macro": { "${key}": "${value}" } },
      "${-/}D${keyNoValue}" :             { "macro": { "${key}": 1 } },

      "${-/}Zl" :                         { "macro": { "_VC_NODEFAULTLIB": 1 } },
      "${-/}Zp(?<alignment>1|2|4|8|16)" : { "parserArgument": [ "--pack_alignment", "${alignment}" ] },
      "${-/}Zp(?<alignment>.+)":          { "warning": "unknown pack alignment ${alignment}", "parserArgument": [ "--pack_alignment", 1 ] },

      "${-/}fp:except":                   { "macro": { "_M_FP_EXCEPT": 1} },
      "${-/}fp:except-":                  { "macro": { "_M_FP_EXCEPT": null} },
      "${-/}fp:fast":                     { "macro": { "_M_FP_FAST": 1} },
      "${-/}fp:precise":                  { "macro": { "_M_FP_PRECISE": 1} },
      "${-/}fp:strict":                   { "macro": { "_M_FP_STRICT": 1, "_M_FP_EXCEPT":1} },
      "${-/}GR":                          { "parserArgument": "--rtti" },
      "${-/}GR-":                         { "parserArgument": "--no_rtti" },
      "${-/}headerUnit;(?<hu>.+)":        { "parserArgument": ["--ms_header_unit","${hu}"] },
      "${-/}headerUnit(?<hu>.+)":         { "parserArgument": ["--ms_header_unit","${hu}"] },
      "${-/}ifcSearchDir;(?<md>.+)":      { "parserArgument": ["--modules_directory","${md}"] },
      "${-/}ifcSearchDir(?<md>.+)":       { "parserArgument": ["--modules_directory","${md}"] },
      "${-/}J":                           { "parserArgument": "--unsiged_chars" , "macro": { "_CHAR_UNSIGNED": 1 } },
      "${-/}LD":                          { "macro": { "_MT":1 } },
      "${-/}MT":                          { "macro": { "_MT":1 } },
      "${-/}LDd":                         { "macro": { "_MT":1, "_DEBUG":1 } },
      "${-/}MTd":                         { "macro": { "_MT":1, "_DEBUG":1 } },
      "${-/}MD":                          { "macro": { "_MT":1, "_DLL":1 } },
      "${-/}MDd":                         { "macro": { "_MT":1, "_DLL":1, "_DEBUG":1 } },
      "${-/}openmp":                      { "macro": { "_OPENMP":"200203" } },
      "${-/}openmp:experimental":         { "macro": { "_OPENMP":"2019" } },
      "${-/}openmp:llvm":                 { "macro": { "_OPENMP":"200203", "_OPENMP_LLVM_RUNTIME":1 } },
      "${-/}permissive":                  { "parserArgument": "--ms_permissive" },
      "${-/}permissive-":                 { "parserArgument": "--no_ms_permissive" },
      "${-/}reference;(?<path>.+)":       { "parserArgument": ["--ms_mod_file_map","${path}"] },
      "${-/}reference(?<path>.+)":        { "parserArgument": ["--ms_mod_file_map","${path}"] },
      "${-/}showIncludes":                { "parserArgument": "--trace_includes" },
      "${-/}stdIfcDir;(?<path>.+)":       { "parserArgument": ["--std_modules_directory","${path}"] },
      "${-/}stdIfcDir(?<path>.+)":        { "parserArgument": ["--std_modules_directory","${path}"] },
      "${-/}volatile:iso":                { "macro": { "_VOLATILE_ISO":1 } },
      "${-/}Za":                          { "parserArgument": "--alternative_tokens" },
      "${-/}Zc:__cplusplus":              { "parserArgument": "--ms_cplusplus_std_value" },
      "${-/}Zc:__cplusplus-":             { "parserArgument": "--no_ms_cplusplus_std_value" },
      "${-/}Zc:char8_t":                  { "parserArgument": "--char8_t" },
      "${-/}Zc:char8_t-":                 { "parserArgument": "--no_char8_t" },
      "${-/}Zc:forScope":                 { "parserArgument": "--new_for_init" },
      "${-/}Zc:forScope-":                { "parserArgument": "--old_for_init" },
      "${-/}Zc:wchar_t":                  { "parserArgument": "--wchar_t_keyword" },
      "${-/}Zc:wchar_t-":                 { "parserArgument": "--no_wchar_t_keyword" },
      "${-/}Zc:auto-":                    { "parserArgument": "--no_auto_type" },
      "${-/}Zc:trigraphs":                { "parserArgument": "--trigraphs" },
      "${-/}Zc:trigraphs-":               { "parserArgument": "--no_trigraphs" },
      "${-/}Zc:rvalueCast":               { "parserArgument": "--ms_rvalue_cast" },
      "${-/}Zc:rvalueCast-":              { "parserArgument": "--no_ms_rvalue_cast" },
      "${-/}Zc:strictStrings":            { "parserArgument": "--no_deprecated_string_conv" },
      "${-/}Zc:strictStrings-":           { "parserArgument": "--deprecated_string_conv" },
      "${-/}Zc:noexceptTypes":            { "parserArgument": "--exc_spec_in_func_type" },
      "${-/}Zc:noexceptTypes-":           { "parserArgument": "--no_exc_spec_in_func_type" },
      "${-/}Zc:alignedNew":               { "parserArgument": "--overaligned_allocation" },
      "${-/}Zc:alignedNew-":              { "parserArgument": "--no_overaligned_allocation" },
      "${-/}Zc:referenceBinding":         { "parserArgument": "--no_nonconst_ref_anachronism" },
      "${-/}Zc:referenceBinding-":        { "parserArgument": "--nonconst_ref_anachronism" },
      "${-/}Zc:ternary":                  { "parserArgument": "--ms_strict_ternary" },
      "${-/}Zc:ternary-":                 { "parserArgument": "--no_ms_strict_ternary", "remove:parserArgument": "--ms_strict_ternary" },
      "${-/}Zc:twoPhase":                 { "parserArgument": "--no_dep_name" },
    },

    "commandLineArguments:CPP": {
      "${-/}await":                       { "parserArgument": "--ms_await"  },
      "${-/}experimental:module" :        { "parserArgument": "--modules"  },
      "${-/}experimental:preprocessor" :  { "parserArgument": "--ms_std_preprocessor"  },
      "${-/}Zc:preprocessor" :            { "parserArgument": "--ms_std_preprocessor"  },
      "${-/}experimental:preprocessor-" : { "parserArgument": "--no_ms_std_preprocessor" },
      "${-/}Zc:preprocessor-" :           { "parserArgument": "--no_ms_std_preprocessor" },
      "${-/}std:(?<std>.+)" :             { "standard":"${std}" },
      "${-/}kernel":                      { "macro": { "_KERNEL_MODE": 1 }, "parserArgument": ["--no_exceptions","no_rtti"] },
    },


    "commandLineArguments: # CPP-CLI ??? todo - come back to this (cl_compiler_info.cpp@485 to )": {

      // *** This section would not apply to ARM complier? <#if !VSCODE_ARM> -- see cl_compiler_info.cpp@485 --
      // *** which I think may be a mistake, since being applied to ARM64 as a host isn"t right, we"re talking about a target?
      // cpp/cli
      "${-/}clr:initialAppDomain":        { "macro": { "_CPPUNWIND":1 }},
      "${-/}clr:netcore":                 { "parserArgument": ["--cppcli_netcore","--no_using_framework_directory", "--cppcli"],"macro":{"D_CLR_NETCORE":1, "_MANAGED":1, "_M_CEE_":"001"} },
      "${-/}clr:newSyntax":               { "parserArgument": "--cppcli", "macro": {"_CPPUNWIND":1, "_M_CEE_PURE":"001", "_MANAGED":1, "_M_CEE_":"001" }},
      "${-/}clr:noAssembly":              { "parserArgument": "--cppcli", "macro": { "_MANAGED":1, "_M_CEE_":"001" }},
      "${-/}clr:nostdlib":                { "parserArgument": ["--no_using_framework_directory"] },
      "${-/}clr:nostdimport":             { "parserArgument": ["--no_stdlib"] },
      "${-/}clr":                         { "parserArgument": "--cppcli", "macro": { "_MANAGED":1, "_M_CEE_":"001", "_CPPUNWIND":1, }},
      "${-/}clr:pure":                    { "parserArgument": "--cppcli", "macro": { "_MANAGED":1, "_M_CEE_":"001", "_CPPUNWIND":1, }},
      "${-/}clr:safe":                    { "parserArgument": "--cppcli", "macro": { "_MANAGED":1, "_M_CEE_":"001", "_CPPUNWIND":1, "_M_CEE_PURE":"001", "_M_CEE_SAFE":"001" }},

      "${-/}zw":                          { "parserArgument": "--cppcx" },
      "${-/}zw:nostdlib":                 { "parserArgument": "--cppcx"},
    },
    
    "commandLineArguments:C" : {
      "${-/}kernel":                      { "macro": { "_KERNEL_MODE": 1 } },
      "${-/}std:(?<std>.+)" :             { "cStandard":"${std}" },
    },

    "query" : {
      "-E /Zc:preprocessor ${queryArgument} /PD ${tmp.c}": {
        "^#define (?<key>\\S*) ?(?<value>.*)?$":                        { "macro":{ "${key}": "${value}" } }, 
      }
    },
    
    "expressions: PRIORITY=85" : { 
      "${bits} === 64" : {
          "parserArgument": [
              "-D_MSC_EXTENSIONS",
              "--microsoft",
              "--microsoft_bugs",
              "--microsoft_version", "1935",
              "--pack_alignment", "8",
              "-D_CPPUNWIND=1",
              "-D_MSC_VER=1935",
              "-D_MSC_FULL_VER=193532215",
              "-D_MSC_BUILD=0",
              "-D_M_X64=100",
              "-D_M_AMD64=100"
          ]
        
      }
    },
    "task:post-process": [
      // see cl_compiler_info.cpp@617 - process zw directories
      "zwCommandLineSwitch",
      "experimentalModuleNegative",
    ],
    
  }

}

